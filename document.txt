Styled Components:

Styled Components-ն առաջարկում է բացականության միջոցով մշակված CSS վիճակագրություններ, որոնց համար չեն պահանջվում ստեղների համարներ կամ պարզապես գրադարաններ: Սովորական CSS-ի պարզապես մշակելու համար այն գործակալվում է JavaScript-ի միջոցով:

Ստեղների համար նախ պետք է գրանցվեն կամայական React կոմպոնենտում: Այնուհետև մենք կարող ենք սահմանել բացականությունը և ներկայացնել այն մեր կոմպոնենտում: Օրինակով, այստեղ

********************************************************
useState Hook:
ReactJS-ում useState-ը մեկ օգտագործողի տվյալների պահոց ստեղն է, որը թույլ է տալիս նորից փոփոխել և վերադարձնել մեր կոմպոնենտի տվյալները: Դրա օգտագործման համար, մենք միայն պետք է ավելացնենք useState ֆունկցիան մեր կոմպոնենտում:

Օրինակով, եթե մեզ հարկավոր է ստեղծել կոճակ, որը կարող է փոխել մեր կոմպոնենտի վիճակը, մենք կարող ենք օգտագործել useState-ը: Մեր կոմպոնենտում, մենք կարող ենք սահմանել կոճակի վիճակը և նորից փոխել դա:

to get data from database in frontend there is a several ways to do that :
1-XMLhttpRequest
2-fetch request 
3-axios request

those request method are the way to establish connection between frontend and backend to get our data
via endpoints for example in my backend i have method :"POST" http://example.com:3000/api/users /api/users is my end point with POST method which means in frontend if i have to do someting with that part of route 
it needs to send one of the requestes above with the same method and endpoint

Backend part:

dataBase connection:
mongoose:
Mongoose-ը Node.js հավելված է, որը աշխատում է MongoDB բազայի վրա: Mongoose-ը ամենահայտնի օգտագործողների մեջ հայտնաբերված է, քանի որ այն անհրաժեշտ գործիքներ առանց ավելորդ նկարագրության անցկացման մեջ պահում է:

Mongoose-ը թույլ է տալիս սահմանել մոդելներ, ստեղծել մոնգո օբյեկտներ, կապվել MongoDB բազայի հետ և կատարել CRUD (ստեղնաշարերի համար կատարելիս օբյեկտների ստեղծում, ընդունում, թարմացում և ջնջում) համար հարմար մեթոդներ:

Այսպիսով, Mongoose-ը մի հատ տվյալների պահպանման գործի

routes:
Node.js-ում հասանելի են տվյալների ուղիներ, որոնք ստեղծվում են կայքի համար հիմնականում: Սակայն Node.js-ում տվյալների ուղիները չեն միացված կայքի մեջ, այնպես որ այն տրամադրվում է տվյալների գեներացիայի միջոցով, որպեսզի կայքը կապված լինի այն համար, որ օգտվողները կարողանան կատարել հարմար գործողություններ վեբ կայքի մեջ:

Տվյալների ուղիները մշակելու համար Node.js-ում օգտագործվում են շատ ֆրեյմվորեր, ինչպես Express.js: Express.js-ը ապահովում է բոլոր պահանջվող գոր
